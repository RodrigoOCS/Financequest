from statsmodels.tsa.stattools import adfuller
import streamlit as st
import datetime
import yfinance as yf
import pandas as pd
from numpy import log
from pathlib import Path
from scipy.stats import boxcox

import base64

file_ = open(Path(__file__).parent/"pages/utils/ROCS.gif", "rb")
contents = file_.read()
data_url = base64.b64encode(contents).decode("utf-8")
file_.close()


# Config Page Style and overall data
st.set_page_config(page_title="An√°lise de a√ß√µes", page_icon="üîé", layout="centered")

st.sidebar.markdown(f'<img src="data:image/gif;base64,{data_url}" width="100" height="100" alt="cat gif">',unsafe_allow_html=True)

hj=datetime.datetime.today().__str__()[:10]
periodos_poss√≠veis = ['1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max']


    # config page funcs


def pega_a√ß√£o(quote_name,start='2010-01-01',end=hj,period='1d'):
    if len(quote_name)>1:
        print('a')
        df = yf.Tickers(quote_name).history(start=start,end=end,period=period)['Close']
    else:
        df = yf.Ticker(quote_name[0]).history(start=start,end=end,period=period)['Close'].to_frame()
        df.columns = quote_name

    df.index.name='Data'
    return df

# Page code
st.header('An√°lise as a√ß√µes pelo c√≥digo!')

Formul√°rio1 = st.form('Hist√≥rico')
df_stocks=Path(__file__).parent/'utils/file.xlsx'
df_stocks = pd.read_excel(df_stocks,index_col=0)
stocks=[ e+'.SA' for e in set(df_stocks.values.reshape(1,-1)[0]) if type(e)==str]


with Formul√°rio1:

    quote_ = st.multiselect(label="Selecione as a√ß√µes", options=stocks,default='PETR4.SA')

    c2, c3, c4 = st.columns(3)

    start_ = c3.date_input(
        "Inic√≠o",
        datetime.date(2019, 7, 6))
    end_ = c4.date_input(
        "Fim",
        datetime.date(2020, 7, 6))

    period_ = c2.selectbox('Selecione a frequ√™ncia dos dados',options=periodos_poss√≠veis)

    atualizar = st.form_submit_button('Visualizar')



#if visu:


dados = pega_a√ß√£o(quote_name=quote_, start=start_, end=end_, period=period_)

cont = st.columns(len(dados.columns))
ncols=len(dados.columns)
for n in range(ncols):
    e=dados.columns[n]
    d1 = dados.loc[:, e]

    ret = round(d1.iloc[-1] - d1.iloc[0], 2)
    retpct = str(round((d1.iloc[-1] / d1.iloc[0]) - 1, 2)) + "%"

    cont[n].metric(f'Retorno {e}',ret,retpct)


st.write(f'De {start_} at√© {end_}')




s√≥_retornos = st.checkbox('Retornos')
if s√≥_retornos:
    dados=dados.pct_change().iloc[1:]


tab2,tab3,tab4 = st.tabs(["Valores","Transforma√ß√µes","Volatil√¥metro" ])
dados_transformados = dados.copy()
with tab2:
    st.line_chart(dados)

    with st.expander('Tabela'):
        st.table(dados_transformados)
with tab3:

    n_diff = st.number_input('N√∫mero de Diferencia√ß√µes',value=0,min_value=0,step=1,max_value=5)

    dados_transformados = dados.copy()

    log_ = st.checkbox('Transforma√ß√£o em Log')

    boxcox_ = st.checkbox('Transforma√ß√£o de BOXCOX')
    if log_:
        dados_transformados=log(dados_transformados)

    if boxcox_:
        autolambda = st.checkbox('Escolha autom√°ritca de Lambda',value=True)


        if autolambda:
            for name_col in dados.columns:
                dados_transformados[name_col] = boxcox(dados_transformados[name_col].values)[0]

        else:
            lambda_box = st.number_input('Valor do lambda')
            for name_col in dados.columns:
                dados_transformados[name_col] = boxcox(dados_transformados[name_col].values,lmbda=lambda_box)

    if n_diff!=0:
        dados_transformados = dados_transformados.diff(n_diff).dropna()

    st.line_chart(dados_transformados)
    with st.expander('Tabela'):
        st.table(dados_transformados)


with tab4:
    horizonte = st.slider('Horizonte',1,365,7)
    volatilizado = dados.rolling(horizonte).std().dropna()
    st.line_chart(volatilizado)

with st.expander('Teste ADF'):
    testar_adf=st.button('Testar')
    S√©rie=st.selectbox(options=dados_transformados.columns,label=dados_transformados.columns[0])
    nsig = st.number_input(label='N√≠vel de signific√¢ncia', max_value=0.99, min_value=0.01,value=0.95)

    if testar_adf:
        p_valor = adfuller(dados_transformados[S√©rie], regression='ct')[1]
        if p_valor < 1 - nsig:
            teste = ''
        else:
            teste = 'n√£o'


        textoadf = f'Dado o teste, cujo resultado foi de um p-valor de {str(p_valor)[:6]}, {teste} se pode afirmar que,h√° um n√≠vel de signific√¢ncia de {nsig * 100}%, que o processo cont√©m uma ra√≠z unit√°ria,{teste} sendo portanto fruto de um processo n√£o estacion√°rio.'
        st.write(textoadf)

csv = dados.to_csv().encode('utf-8')
st.download_button(
    label="Download dados como CSV",
    data=csv,
    file_name='Dados.csv',
    mime='text/csv',
)

